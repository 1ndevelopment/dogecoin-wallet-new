import groovy.io.FileType
import groovy.xml.XmlUtil

apply plugin: 'com.android.application'
apply plugin: 'androidsvgdrawable'

dependencies {
    compile(project(':integration-android')) {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.android.support:support-annotations:23.1.0'
    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.android.support:support-v13:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:cardview-v7:23.1.0'
    compile 'org.libdohj:libdohj:0.14-SNAPSHOT'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile('com.github.tony19:logback-android-classic:1.1.1-3') {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.github.tony19:logback-android-core:1.1.1-3'
    compile 'com.google.code.findbugs:jsr305:2.0.3'
    testCompile 'junit:junit:4.11'
}

ext {
    archivesBaseName = 'dogecoin-wallet'
}

android {
    compileSdkVersion 'android-16'
    buildToolsVersion '23.0.2'
    compileSdkVersion 22

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        applicationId 'de.langerhans.wallet'
        versionCode 204
        versionName '2.0.4'
        minSdkVersion 15
        targetSdkVersion 22
    }

    buildTypes {
        all {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
        debug {
            debuggable true
        }
    }

    productFlavors {
        _testnet {
            applicationId 'de.langerhans.wallet.test'
        }

        _mainnet {
            applicationId 'de.langerhans.wallet'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['jniLibs']
        }
        test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }
    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints'
        exclude 'org.bitcoin.test.checkpoints'
    }
}

task svgToPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = file('graphics')
    to = file('res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi']
    outputFormat = 'PNG'
}

android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        def updater = new LangUpdater()
        updater.main(new File("${buildDir}/intermediates/res/merged/${variant.dirName}/"))
    }
}

class LangUpdater {
    def main(File dir) {
        def list = []
        dir.eachFileRecurse (FileType.FILES) { file ->
            list << file
        }
        doReplace(list)
    }

    def doReplace(ArrayList<File> f) {
        def toDo = []
        f.each {
            if (it.getName().matches("values(-\\w{2})?(-\\w{2})?.xml")) {
                toDo << it
            }
        }

        toDo.each {
            def xml = replaceStrings(it)
            def writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(it.getAbsolutePath()), "UTF-8"))
            XmlUtil.serialize(xml, writer)
        }
    }

    def replaceStrings(File f) {
        def resources = new XmlSlurper().parse(f)
        resources.string.each {
            it.replaceBody(tryAllReplacements(it.text()))
        }
        return resources
    }

    def tryAllReplacements(String s) {
        String res = s;
        // Do some specifics first
        res = res.replaceAll("bitcoinj", "libdohj")
        res = res.replaceAll("bitboy", "dogecoin.com")

        // Esperanto specifics
        res = res.replaceAll("Bitmon", "Dogemon")
        res = res.replaceAll("bitmon", "dogemon")

        // Japanese specifics
        res = res.replaceAll("ビット", "ドージ")

        // Chinese specifics
        res = res.replaceAll("比特", "狗狗")

        // And the rest
        res = res.replaceAll("BTC", "DOGE")
        res = res.replaceAll("bitcoin", "dogecoin")
        res = res.replaceAll("Bitcoin", "Dogecoin")

        return res;
    }
}